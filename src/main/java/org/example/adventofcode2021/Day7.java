package org.example.adventofcode2021;

public class Day7 extends Day {
  Day7() {
  }

  private int[] getInput() {
    return new int[] {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6,
        7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 16, 16, 16, 18,
        18, 19, 19, 19, 20, 21, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25, 25, 26, 28, 28, 28,
        28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 35, 35, 35, 36, 36,
        37, 37, 38, 38, 39, 39, 39, 40, 41, 41, 42, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 51,
        52, 53, 57, 57, 57, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 65, 65, 65, 65, 65, 65, 66, 66,
        66, 66, 67, 67, 67, 67, 68, 69, 70, 70, 70, 70, 71, 72, 72, 75, 76, 76, 77, 78, 78, 78, 79,
        81, 81, 81, 83, 84, 84, 84, 84, 85, 85, 85, 86, 86, 87, 88, 89, 89, 89, 90, 90, 90, 91, 92,
        94, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 99, 99, 99, 100, 100, 100, 101, 101, 101, 101,
        101, 101, 101, 101, 101, 102, 102, 103, 103, 103, 104, 105, 105, 105, 106, 106, 107, 108,
        108, 108, 109, 110, 110, 110, 111, 111, 111, 111, 111, 112, 112, 113, 114, 114, 115, 115,
        115, 115, 116, 116, 117, 117, 117, 118, 118, 119, 120, 122, 122, 123, 125, 125, 125, 126,
        127, 128, 129, 131, 131, 131, 133, 133, 133, 133, 135, 137, 140, 141, 141, 143, 144, 147,
        147, 149, 150, 150, 150, 150, 152, 153, 154, 154, 156, 156, 157, 157, 157, 159, 160, 160,
        160, 161, 162, 162, 163, 164, 164, 165, 165, 167, 167, 169, 172, 176, 176, 179, 179, 180,
        180, 181, 182, 182, 183, 183, 183, 185, 186, 186, 188, 191, 192, 192, 192, 194, 195, 198,
        199, 199, 201, 201, 203, 203, 204, 204, 206, 207, 207, 208, 208, 209, 210, 210, 211, 212,
        214, 214, 215, 216, 216, 217, 218, 218, 219, 219, 220, 221, 224, 224, 224, 225, 225, 226,
        226, 227, 229, 229, 229, 230, 232, 233, 233, 233, 233, 235, 235, 236, 236, 237, 238, 239,
        240, 240, 240, 240, 243, 243, 244, 244, 244, 246, 248, 250, 250, 250, 250, 252, 252, 253,
        254, 256, 257, 259, 261, 263, 264, 265, 265, 274, 275, 276, 278, 279, 281, 283, 283, 284,
        284, 285, 286, 289, 289, 289, 289, 290, 291, 292, 293, 293, 299, 300, 301, 301, 301, 302,
        302, 303, 303, 305, 307, 307, 309, 313, 313, 313, 314, 314, 315, 315, 316, 316, 316, 316,
        317, 318, 320, 320, 321, 322, 323, 323, 324, 324, 325, 325, 326, 327, 329, 329, 330, 333,
        338, 338, 339, 341, 343, 345, 346, 349, 349, 350, 353, 354, 357, 358, 359, 361, 361, 362,
        362, 362, 362, 365, 372, 373, 375, 378, 380, 381, 382, 388, 389, 391, 392, 392, 393, 394,
        395, 395, 396, 397, 399, 402, 402, 403, 404, 411, 412, 415, 416, 419, 419, 420, 420, 421,
        424, 425, 429, 431, 431, 431, 433, 433, 434, 435, 438, 439, 439, 439, 440, 440, 441, 443,
        443, 443, 444, 446, 446, 447, 454, 455, 455, 456, 456, 456, 457, 458, 458, 460, 461, 461,
        462, 463, 464, 466, 467, 468, 468, 470, 473, 475, 475, 477, 478, 479, 480, 481, 484, 485,
        485, 488, 488, 488, 490, 496, 496, 497, 499, 499, 502, 504, 507, 509, 511, 511, 512, 514,
        517, 517, 518, 518, 520, 520, 525, 528, 531, 531, 534, 535, 538, 538, 542, 547, 549, 549,
        550, 550, 554, 556, 556, 559, 560, 560, 561, 563, 564, 564, 566, 570, 570, 574, 576, 577,
        577, 578, 580, 581, 581, 581, 584, 584, 584, 584, 593, 595, 595, 598, 601, 603, 604, 606,
        606, 608, 610, 614, 615, 616, 616, 618, 625, 626, 628, 631, 633, 640, 642, 643, 644, 645,
        646, 647, 648, 650, 651, 653, 654, 654, 659, 662, 663, 665, 666, 669, 672, 672, 675, 678,
        679, 680, 680, 680, 681, 682, 686, 691, 695, 695, 697, 697, 698, 698, 699, 700, 701, 702,
        703, 705, 708, 715, 717, 718, 718, 720, 724, 725, 727, 728, 732, 734, 739, 739, 740, 742,
        742, 743, 743, 743, 744, 747, 751, 751, 754, 759, 760, 762, 763, 765, 767, 767, 768, 772,
        777, 778, 780, 780, 786, 793, 797, 797, 799, 802, 803, 806, 814, 819, 819, 822, 822, 827,
        828, 828, 830, 836, 840, 841, 842, 849, 851, 851, 855, 856, 856, 856, 858, 864, 866, 871,
        871, 871, 871, 872, 877, 877, 882, 882, 888, 889, 890, 892, 894, 894, 895, 896, 899, 899,
        899, 899, 900, 903, 903, 906, 919, 919, 926, 931, 934, 935, 937, 938, 939, 939, 940, 941,
        942, 945, 946, 946, 948, 950, 952, 953, 954, 956, 958, 961, 966, 970, 980, 980, 984, 985,
        987, 991, 992, 995, 1001, 1003, 1005, 1007, 1008, 1011, 1016, 1018, 1031, 1046, 1048, 1058,
        1060, 1060, 1060, 1064, 1068, 1072, 1079, 1090, 1092, 1094, 1094, 1096, 1099, 1100, 1101,
        1101, 1102, 1102, 1102, 1104, 1105, 1106, 1115, 1115, 1119, 1121, 1126, 1129, 1137, 1141,
        1142, 1153, 1154, 1157, 1159, 1164, 1164, 1166, 1167, 1168, 1176, 1181, 1182, 1182, 1192,
        1203, 1205, 1207, 1207, 1228, 1231, 1235, 1235, 1243, 1256, 1257, 1264, 1266, 1271, 1273,
        1273, 1276, 1276, 1282, 1283, 1288, 1292, 1294, 1298, 1311, 1311, 1315, 1317, 1323, 1324,
        1330, 1332, 1334, 1335, 1337, 1342, 1344, 1350, 1359, 1363, 1367, 1369, 1372, 1374, 1377,
        1391, 1399, 1404, 1410, 1417, 1422, 1422, 1422, 1424, 1425, 1430, 1434, 1439, 1439, 1441,
        1442, 1444, 1456, 1456, 1485, 1485, 1488, 1489, 1491, 1494, 1497, 1513, 1514, 1520, 1521,
        1546, 1563, 1572, 1579, 1585, 1586, 1597, 1601, 1607, 1615, 1617, 1621, 1631, 1646, 1654,
        1655, 1686, 1715, 1715, 1760, 1778, 1779, 1807, 1840};
  }

  void part1() {
    // Read where our crabs are, make an array to hold them, and put each crab in its position.
    final var input = getInput();
    final var crabs = new int[input[input.length - 1] + 1];
    for (final int crab : input) {
      crabs[crab] += 1;
    }

    int lowestCrab = input[0];
    int highestCrab = input[input.length - 1];
    int fuelUsed = 0;

    while (lowestCrab != highestCrab) {
      if (crabs[lowestCrab] <= crabs[highestCrab]) {
        int nextLowestCrab = lowestCrab + 1;
        while (crabs[nextLowestCrab] == 0) {
          nextLowestCrab++;
        }
        crabs[nextLowestCrab] = crabs[nextLowestCrab] + crabs[lowestCrab];
        fuelUsed = fuelUsed + ((nextLowestCrab - lowestCrab) * crabs[lowestCrab]);
        crabs[lowestCrab] = 0;
        lowestCrab = nextLowestCrab;
      } else {
        int nextHighestCrab = highestCrab - 1;
        while (nextHighestCrab == 0) {
          nextHighestCrab--;
        }
        crabs[nextHighestCrab] = crabs[nextHighestCrab] + crabs[highestCrab];
        fuelUsed = fuelUsed + ((highestCrab - nextHighestCrab) * crabs[highestCrab]);
        highestCrab = nextHighestCrab;
      }
    }

    System.out.println("Day 7, Part 1. Fuel used to move the crabs: " + fuelUsed);
  }

  void part2() {
    System.out.println("Day 7 Part 2 is not done yet.");
  }
}
